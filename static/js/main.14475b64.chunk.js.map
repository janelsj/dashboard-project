{"version":3,"sources":["common_functions/api.js","common_functions/graph.js","components/gold-price.js","components/s-and-p-500-price.js","common_functions/dropdown-list-maker.js","components/digital-and-cryptocurrency.js","components/forex.js","screens/dashboard-screen.js","App.js","reportWebVitals.js","index.js"],"names":["API","axios","create","baseURL","headers","Graph","x","y","color","chartTitle","isLoaded","override","css","className","data","type","mode","marker","layout","width","height","title","loading","radius","margin","Gold","useState","xValuesFunction","setXValuesFunction","yValuesFunction","setYValuesFunction","isAPILoaded","setIsAPILoaded","useEffect","get","params","function","symbol","datatype","then","response","key","moment","isSameOrAfter","push","parseFloat","toFixed","format","SnP500","xAxis","setXAxis","yAxis","setYAxis","a","snp500Data","xValuesArray","yValuesArray","getSnP500Data","eachDate","DropdownListMaker","filePathName","list","setList","array","Papa","parse","download","header","step","result","complete","results","value","nanoid","map","item","Crypto","graphValues","setGraphValues","market","setMarket","setSymbol","split","cryptoData","getCryptoData","alert","setTimeout","document","querySelector","focus","htmlFor","name","onChange","e","target","options","selectedIndex","Forex","fromSymbol","setFromSymbol","toSymbol","setToSymbol","from_symbol","to_symbol","forexData","getForexData","DashboardScreen","id","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.14475b64.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst API = axios.create({\r\n    baseURL: \"https://alpha-vantage.p.rapidapi.com/query\",\r\n    headers: {'x-rapidapi-host': 'alpha-vantage.p.rapidapi.com'}\r\n});\r\n\r\nexport default API;","import Plot from 'react-plotly.js';\r\nimport { css } from \"@emotion/react\";\r\nimport ScaleLoader from \"react-spinners/ScaleLoader\";\r\n\r\nfunction Graph({x, y, color, chartTitle, isLoaded}){\r\n  \r\n  const override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  padding-top: 20px;\r\n  border-color: ${color};\r\n`;\r\n\r\n  return(<div className=\"graph\">\r\n    {isLoaded ? \r\n      <Plot data={[\r\n            {\r\n              x: x,\r\n              y: y,\r\n              type: 'scatter',\r\n              mode: 'lines',\r\n              marker: {color: color},\r\n            },\r\n          ]}\r\n          layout={{width: 700, height: 550, title: chartTitle}}\r\n      /> \r\n      : <ScaleLoader color={color} loading={!isLoaded} css={override} height={70} width={10} radius={30} margin={5}/>\r\n      }\r\n    </div>)\r\n}\r\n\r\nexport default Graph;","import API from '../common_functions/api';\r\nimport {useEffect, useState} from 'react';\r\nimport Graph from '../common_functions/graph';\r\nimport moment from 'moment';\r\n\r\n//  fetchGold() {\r\n//     API.get( '/owner')\r\n//     const API_KEY = '03Q1B3D0MEHUO0ZQ';\r\n//     let API_Call = 'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=GLD&outputsize=full&apikey=${API_KEY}';\r\n// };\r\n\r\nfunction Gold() {\r\n    const [xValuesFunction, setXValuesFunction] = useState([]);\r\n    const [yValuesFunction, setYValuesFunction] = useState([]);\r\n    const [isAPILoaded, setIsAPILoaded] = useState(false);\r\n\r\n    useEffect (()=> {\r\n        API.get('', {\r\n            headers: {'x-rapidapi-key': '956f29f902mshec9c7d274d0cce0p1074e5jsnc6ab53dcf3ad'}, //Hansen key\r\n            params: {\r\n                function: 'TIME_SERIES_WEEKLY',\r\n                symbol: 'GLD',\r\n                datatype: 'json',\r\n                // output_size: 'compact'\r\n              },\r\n          })\r\n          .then(function (response)\r\n          {\r\n            //   console.log(response);\r\n              // console.log(response.data);\r\n\r\n              let xValuesFunction = [];\r\n              let yValuesFunction = [];\r\n\r\n              for (let key in response.data['Weekly Time Series']){\r\n                    if (moment(key).isSameOrAfter('2019-W01-1')) {\r\n                      xValuesFunction.push(key);\r\n                      yValuesFunction.push(response.data['Weekly Time Series'][key]['4. close']);\r\n                    }\r\n              }\r\n            //   console.log(xValuesFunction);\r\n            //   console.log(yValuesFunction);\r\n\r\n              setXValuesFunction(xValuesFunction);\r\n              setYValuesFunction(yValuesFunction);\r\n              setIsAPILoaded(true);\r\n          })\r\n\r\n    }, []);\r\n\r\n    // console.log(xValuesFunction);\r\n    // console.log(yValuesFunction);\r\n\r\n    return(<>\r\n          <div className=\"div-header\">\r\n            <h2>Gold Price</h2>\r\n            <h4>Latest Closing Price : {parseFloat(yValuesFunction[0]).toFixed(2)} USD <br/> Last Retrieved On : {moment(xValuesFunction[0]).format('Do MMMM YYYY')}</h4>\r\n          </div>\r\n            <Graph \r\n              x={xValuesFunction}\r\n              y={yValuesFunction}\r\n              color='#d4af37'\r\n              chartTitle=\"Weekly Time Series of Gold (in USD)\"\r\n              isLoaded={isAPILoaded}\r\n            />\r\n    </>)\r\n}\r\n\r\nexport default Gold;","import {useState, useEffect} from 'react';\r\nimport API from '../common_functions/api';\r\nimport Graph from '../common_functions/graph';\r\nimport moment from 'moment';\r\n\r\nfunction SnP500(){\r\n  const [xAxis, setXAxis] = useState([]);\r\n  const [yAxis, setYAxis] = useState([]);\r\n  const [isAPILoaded, setIsAPILoaded] = useState(false);\r\n\r\nasync function getSnP500Data() {\r\n  const snp500Data = await API.get('', {\r\n          headers: {'x-rapidapi-key': '956f29f902mshec9c7d274d0cce0p1074e5jsnc6ab53dcf3ad'}, //Hansen key\r\n          params: {\r\n            function: 'TIME_SERIES_WEEKLY', \r\n            symbol: 'SPY', \r\n            //outputsize: 'compact'\r\n          }\r\n      });\r\n   return snp500Data;\r\n  }\r\n\r\n  useEffect(()=>{\r\n    let xValuesArray = [];\r\n    let yValuesArray = [];\r\n\r\n    getSnP500Data().then(response => {\r\n      //console.log(response.data);\r\n        for (let eachDate in response.data['Weekly Time Series']){\r\n          if (moment(eachDate).isSameOrAfter('2019-W01-1')) {\r\n            xValuesArray.push(eachDate);\r\n            yValuesArray.push(response.data['Weekly Time Series'][eachDate]['4. close']);\r\n          }  \r\n        }\r\n        setXAxis(xValuesArray);\r\n        setYAxis(yValuesArray);\r\n        setIsAPILoaded(true);\r\n    });\r\n}, []);\r\n    \r\n    return(<>\r\n      <div className=\"div-header\">\r\n        <h2>S&P 500 Price</h2>\r\n        <h4>Latest Closing Price : {parseFloat(yAxis[0]).toFixed(2)} USD <br/> Last Retrieved On : {moment(xAxis[0]).format('Do MMMM YYYY')}</h4>\r\n      </div>\r\n        <Graph \r\n             x={xAxis}\r\n             y={yAxis}\r\n            color='#299617'\r\n            chartTitle={\"Weekly Time Series of S&P 500 (in USD)\"}\r\n            isLoaded={isAPILoaded}\r\n        />\r\n    </>)\r\n}\r\n\r\nexport default SnP500;","import {useState, useEffect} from 'react';\r\nimport Papa from 'papaparse';\r\nimport { nanoid } from 'nanoid';\r\n\r\nfunction DropdownListMaker({filePathName}) {\r\n\r\n    const[list, setList] = useState([]);\r\n\r\n    useEffect(()=>{\r\n\r\n        let array =[];  \r\n\r\n        /*Papaparse API Library used to get values from csv files for the dropdown lists */\r\n        Papa.parse(`/dashboard-project/data/${filePathName}_currency_list.csv`, {\r\n        download: true,\r\n        header: true,\r\n        step: (result) => array.push(result.data),\r\n        complete: (results) => {\r\n            results.data = array;\r\n            setList(results.data);\r\n            }\r\n        });\r\n\r\n        return () => setList([]);\r\n    }, [])\r\n    \r\n    return(<>\r\n        <option key={nanoid()} value=\"\">Select currency</option>\r\n        {list.map(item => {\r\n            return <option key={nanoid()} value={`${item['currency code']},${item['currency name']}`}>{`${item['currency code']} (${item['currency name']})`}</option>\r\n        })}\r\n    </>)\r\n}\r\n\r\nexport default DropdownListMaker;","import {useState, useEffect} from 'react';\r\nimport Graph from '../common_functions/graph';\r\nimport API from '../common_functions/api';\r\nimport DropdownListMaker from '../common_functions/dropdown-list-maker';\r\nimport moment from 'moment';\r\n\r\nfunction Crypto(){\r\n\r\n    const [graphValues, setGraphValues] = useState({\r\n        xAxis: [],\r\n        yAxis: [],\r\n    });\r\n    const [market, setMarket] = useState('USD,United States Dollar');\r\n    const [symbol, setSymbol] = useState('BTC,Bitcoin');\r\n    const [isAPILoaded, setIsAPILoaded] = useState(false);\r\n\r\n    async function getCryptoData() {\r\n        const cryptoData = await API.get('', {\r\n            headers: {'x-rapidapi-key': 'a57be0c007msh6f8ae509f4788bap1cd588jsn08ecd04d7136'},\r\n            params: {market: market.split(\",\")[0], symbol: symbol.split(\",\")[0], function: 'DIGITAL_CURRENCY_WEEKLY'}\r\n        });\r\n        return cryptoData;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        let xValuesArray = [];\r\n        let yValuesArray = [];\r\n        /* Get values for Graph from API*/\r\n        getCryptoData().then(response => {\r\n            if (response.data[\"Error Message\"]) {\r\n                setIsAPILoaded(false);\r\n                alert(\"Invalid selection. Please select another cryptocurrency.\");\r\n                xValuesArray = [''];\r\n                yValuesArray=[''];\r\n                setGraphValues({xAxis: xValuesArray, yAxis: yValuesArray});\r\n                setTimeout(()=>{document.querySelector(\"select[name='physicalCurrency']\").focus()},1);\r\n            } else {\r\n                for (let eachDate in response.data['Time Series (Digital Currency Weekly)']){\r\n                    // console.log(response.data['Time Series (Digital Currency Weekly)'][eachDate][`4a. close (${market.split(\",\")[0]})`]);\r\n                    xValuesArray.push(eachDate);\r\n                    yValuesArray.push(response.data['Time Series (Digital Currency Weekly)'][eachDate][`4a. close (${market.split(\",\")[0]})`]);\r\n                }\r\n                setGraphValues({xAxis: xValuesArray, yAxis: yValuesArray});\r\n                setIsAPILoaded(true);\r\n            }\r\n        });\r\n        \r\n        return () => setIsAPILoaded(false);\r\n\r\n    },[market, symbol]);\r\n    \r\n    return(<>\r\n        <div className=\"div-header\">\r\n            <h2>{'Digital & Crypto Currency'}</h2>\r\n            <div className=\"selection\">\r\n                <label htmlFor=\"physicalCurrency\">Choose physical currency:</label>\r\n                <select name=\"physicalCurrency\" value={market} onChange={e => setMarket(e.target.options[e.target.selectedIndex].value)}>\r\n                    <DropdownListMaker filePathName='physical'/>\r\n                </select>\r\n                <label htmlFor=\"digitalCurrency\">Choose digital currency:</label>\r\n                <select name=\"digitalCurrency\" value={symbol} onChange={e => setSymbol(e.target.options[e.target.selectedIndex].value)}>\r\n                    <DropdownListMaker filePathName='digital'/>\r\n                </select> \r\n            </div>\r\n            <h4>Latest Closing Price of {symbol.split(\",\")[0]} : {graphValues.yAxis[0]==='' ? ''\r\n                    : parseFloat(graphValues.yAxis[0]).toFixed(2)} {market.split(\",\")[0]} <br/>\r\n                Last Retrieved On : {moment(graphValues.xAxis[0]).format('Do MMMM YYYY')}</h4>\r\n        </div>\r\n        <Graph \r\n             x={graphValues.xAxis}\r\n             y={graphValues.yAxis}\r\n            color='blue'\r\n            chartTitle={`Weekly Time Series of ${symbol.split(\",\")[1]} valuation (in ${market.split(\",\")[0]})`}\r\n            isLoaded={isAPILoaded}\r\n        />\r\n    </>)\r\n}\r\n\r\nexport default Crypto;","import {useState, useEffect} from 'react';\r\nimport Graph from '../common_functions/graph';\r\nimport API from '../common_functions/api';\r\nimport DropdownListMaker from '../common_functions/dropdown-list-maker';\r\nimport moment from 'moment';\r\n\r\nfunction Forex(){\r\n\r\n    const [graphValues, setGraphValues] = useState({\r\n        xAxis: [],\r\n        yAxis: [],\r\n    });\r\n    const [fromSymbol, setFromSymbol] = useState('USD,United States Dollar');\r\n    const [toSymbol, setToSymbol] = useState('SGD,Singapore Dollar');\r\n    const [isAPILoaded, setIsAPILoaded] = useState(false);\r\n\r\n    async function getForexData() {\r\n        const forexData = await API.get('', {\r\n            headers: {'x-rapidapi-key': '2cc4f9fb5fmsh6c7c17f151bdaa1p1f3fb7jsne9ae56177c97'},\r\n            params: {from_symbol: fromSymbol.split(\",\")[0], to_symbol: toSymbol.split(\",\")[0], function: 'FX_WEEKLY'}\r\n        });\r\n        return forexData;\r\n    }\r\n\r\n    useEffect(()=>{\r\n        let xValuesArray = [];\r\n        let yValuesArray = [];\r\n        /* Get values for Graph from API*/\r\n        getForexData().then(response => {\r\n            if (toSymbol===fromSymbol || response.data[\"Error Message\"]) {\r\n                setIsAPILoaded(false);\r\n                alert ('Invalid selection. Please choose another currency pair.');\r\n                xValuesArray = [''];\r\n                yValuesArray=[''];\r\n                setGraphValues({xAxis: xValuesArray, yAxis: yValuesArray});\r\n                setTimeout(()=>{document.querySelector(\"select[name='fromCurrency']\").focus()},1);\r\n            } else {\r\n                for (let eachDate in response.data['Time Series FX (Weekly)']){\r\n                    if (moment(eachDate).isSameOrAfter('2019-W01-1')){\r\n                        // console.log(response.data['Time Series FX (Weekly)'][eachDate]['4. close']);\r\n                        xValuesArray.push(eachDate);\r\n                        yValuesArray.push(response.data['Time Series FX (Weekly)'][eachDate]['4. close']);\r\n                    }\r\n                };\r\n                setGraphValues({xAxis: xValuesArray, yAxis: yValuesArray});\r\n                setIsAPILoaded(true);\r\n            }\r\n        });\r\n        \r\n        return () => setIsAPILoaded(false);\r\n\r\n    },[fromSymbol, toSymbol]);\r\n    \r\n    return(<>\r\n        <div className=\"div-header\">\r\n            <h2>Forex: Currency Exchange Rates</h2>\r\n            <div className=\"selection\">\r\n                <label htmlFor=\"fromCurrency\">From:</label>\r\n                <select name=\"fromCurrency\" value={fromSymbol} onChange={e => setFromSymbol(e.target.options[e.target.selectedIndex].value)}>\r\n                    <DropdownListMaker filePathName='physical'/>\r\n                </select>\r\n                <label htmlFor=\"toCurrency\">To:</label>\r\n                <select name=\"toCurrency\" value={toSymbol} onChange={e => setToSymbol(e.target.options[e.target.selectedIndex].value)}>\r\n                    <DropdownListMaker filePathName='physical'/>\r\n                </select>\r\n            </div>\r\n            <h4>Latest Closing Price : {graphValues.yAxis[0]==='' ? ''\r\n                    : parseFloat(graphValues.yAxis[0]).toFixed(4)} ({fromSymbol.split(\",\")[0]} / {toSymbol.split(\",\")[0]}) <br/> \r\n                Last Retrieved On : {moment(graphValues.xAxis[0]).format('Do MMMM YYYY')}</h4>\r\n        </div>\r\n        <Graph \r\n            x={graphValues.xAxis}\r\n            y={graphValues.yAxis}\r\n            color='red'\r\n            chartTitle={`Forex Weekly Prices of ${fromSymbol.split(\",\")[1]} (in ${toSymbol.split(\",\")[0]})`}\r\n            isLoaded={isAPILoaded}\r\n        />\r\n    </>)\r\n}\r\n\r\nexport default Forex;","import React from 'react';\r\nimport Gold from '../components/gold-price';\r\nimport SnP500 from '../components/s-and-p-500-price';\r\nimport Crypto from '../components/digital-and-cryptocurrency';\r\nimport Forex from '../components/forex';\r\n\r\nclass DashboardScreen extends React.Component {\r\n    render() {\r\n        return(<div id=\"parent\">\r\n            <div id=\"gold\"><Gold/></div>\r\n            <div id=\"snp500\"><SnP500/></div>\r\n            <div id=\"crypto\"><Crypto/></div>\r\n            <div id=\"forex\"><Forex/></div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default DashboardScreen;","import DashboardScreen from './screens/dashboard-screen';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (<div className=\"App\">\r\n    <h1>Investor's Dashboard</h1>\r\n    <DashboardScreen />\r\n  </div>);\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}